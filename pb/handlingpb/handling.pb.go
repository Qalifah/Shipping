// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: handling.proto

package handlingpb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RegisterHandlingEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Completed    *timestamp.Timestamp `protobuf:"bytes,1,opt,name=completed,proto3" json:"completed,omitempty"`
	TrackingId   string               `protobuf:"bytes,2,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"`
	VoyageNumber string               `protobuf:"bytes,3,opt,name=voyage_number,json=voyageNumber,proto3" json:"voyage_number,omitempty"`
	Location     string               `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	EventType    int64                `protobuf:"varint,5,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
}

func (x *RegisterHandlingEventRequest) Reset() {
	*x = RegisterHandlingEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handling_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterHandlingEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterHandlingEventRequest) ProtoMessage() {}

func (x *RegisterHandlingEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_handling_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterHandlingEventRequest.ProtoReflect.Descriptor instead.
func (*RegisterHandlingEventRequest) Descriptor() ([]byte, []int) {
	return file_handling_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterHandlingEventRequest) GetCompleted() *timestamp.Timestamp {
	if x != nil {
		return x.Completed
	}
	return nil
}

func (x *RegisterHandlingEventRequest) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *RegisterHandlingEventRequest) GetVoyageNumber() string {
	if x != nil {
		return x.VoyageNumber
	}
	return ""
}

func (x *RegisterHandlingEventRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *RegisterHandlingEventRequest) GetEventType() int64 {
	if x != nil {
		return x.EventType
	}
	return 0
}

type RegisterHandlingEventReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err string `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *RegisterHandlingEventReply) Reset() {
	*x = RegisterHandlingEventReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handling_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterHandlingEventReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterHandlingEventReply) ProtoMessage() {}

func (x *RegisterHandlingEventReply) ProtoReflect() protoreflect.Message {
	mi := &file_handling_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterHandlingEventReply.ProtoReflect.Descriptor instead.
func (*RegisterHandlingEventReply) Descriptor() ([]byte, []int) {
	return file_handling_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterHandlingEventReply) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

var File_handling_proto protoreflect.FileDescriptor

var file_handling_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd9, 0x01,
	0x0a, 0x1c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69,
	0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x6f, 0x79,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2e, 0x0a, 0x1a, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x32, 0x77, 0x0a, 0x08, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x6b, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28,
	0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_handling_proto_rawDescOnce sync.Once
	file_handling_proto_rawDescData = file_handling_proto_rawDesc
)

func file_handling_proto_rawDescGZIP() []byte {
	file_handling_proto_rawDescOnce.Do(func() {
		file_handling_proto_rawDescData = protoimpl.X.CompressGZIP(file_handling_proto_rawDescData)
	})
	return file_handling_proto_rawDescData
}

var file_handling_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_handling_proto_goTypes = []interface{}{
	(*RegisterHandlingEventRequest)(nil), // 0: handlingpb.RegisterHandlingEventRequest
	(*RegisterHandlingEventReply)(nil),   // 1: handlingpb.RegisterHandlingEventReply
	(*timestamp.Timestamp)(nil),          // 2: google.protobuf.Timestamp
}
var file_handling_proto_depIdxs = []int32{
	2, // 0: handlingpb.RegisterHandlingEventRequest.completed:type_name -> google.protobuf.Timestamp
	0, // 1: handlingpb.Handling.RegisterHandlingEvent:input_type -> handlingpb.RegisterHandlingEventRequest
	1, // 2: handlingpb.Handling.RegisterHandlingEvent:output_type -> handlingpb.RegisterHandlingEventReply
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_handling_proto_init() }
func file_handling_proto_init() {
	if File_handling_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_handling_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterHandlingEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handling_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterHandlingEventReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_handling_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_handling_proto_goTypes,
		DependencyIndexes: file_handling_proto_depIdxs,
		MessageInfos:      file_handling_proto_msgTypes,
	}.Build()
	File_handling_proto = out.File
	file_handling_proto_rawDesc = nil
	file_handling_proto_goTypes = nil
	file_handling_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HandlingClient is the client API for Handling service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HandlingClient interface {
	RegisterHandlingEvent(ctx context.Context, in *RegisterHandlingEventRequest, opts ...grpc.CallOption) (*RegisterHandlingEventReply, error)
}

type handlingClient struct {
	cc grpc.ClientConnInterface
}

func NewHandlingClient(cc grpc.ClientConnInterface) HandlingClient {
	return &handlingClient{cc}
}

func (c *handlingClient) RegisterHandlingEvent(ctx context.Context, in *RegisterHandlingEventRequest, opts ...grpc.CallOption) (*RegisterHandlingEventReply, error) {
	out := new(RegisterHandlingEventReply)
	err := c.cc.Invoke(ctx, "/handlingpb.Handling/RegisterHandlingEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HandlingServer is the server API for Handling service.
type HandlingServer interface {
	RegisterHandlingEvent(context.Context, *RegisterHandlingEventRequest) (*RegisterHandlingEventReply, error)
}

// UnimplementedHandlingServer can be embedded to have forward compatible implementations.
type UnimplementedHandlingServer struct {
}

func (*UnimplementedHandlingServer) RegisterHandlingEvent(context.Context, *RegisterHandlingEventRequest) (*RegisterHandlingEventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterHandlingEvent not implemented")
}

func RegisterHandlingServer(s *grpc.Server, srv HandlingServer) {
	s.RegisterService(&_Handling_serviceDesc, srv)
}

func _Handling_RegisterHandlingEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterHandlingEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlingServer).RegisterHandlingEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handlingpb.Handling/RegisterHandlingEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlingServer).RegisterHandlingEvent(ctx, req.(*RegisterHandlingEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Handling_serviceDesc = grpc.ServiceDesc{
	ServiceName: "handlingpb.Handling",
	HandlerType: (*HandlingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterHandlingEvent",
			Handler:    _Handling_RegisterHandlingEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "handling.proto",
}
